# Streamlit stub file for type checking
# This helps VS Code understand Streamlit's dynamic API

from typing import Any, Dict, List, Optional, Union, Callable

class SessionState:
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

def set_page_config(**kwargs: Any) -> None: ...
def markdown(body: str, unsafe_allow_html: bool = False) -> None: ...
def title(body: str) -> None: ...
def header(body: str) -> None: ...
def subheader(body: str) -> None: ...
def write(*args: Any) -> None: ...
def info(body: str) -> None: ...
def success(body: str) -> None: ...
def warning(body: str) -> None: ...
def error(body: str) -> None: ...
def button(label: str, key: Optional[str] = None, help: Optional[str] = None, type: str = "secondary") -> bool: ...
def checkbox(label: str, value: bool = False, key: Optional[str] = None) -> bool: ...
def selectbox(label: str, options: List[str], index: int = 0, key: Optional[str] = None, disabled: bool = False, help: Optional[str] = None) -> Any: ...
def slider(label: str, min_value: int, max_value: int, value: int, key: Optional[str] = None) -> int: ...
def columns(spec: Union[int, List[int]]) -> List[Any]: ...
def tabs(tab_names: List[str]) -> List[Any]: ...
def metric(label: str, value: str, delta: Optional[str] = None) -> None: ...
def plotly_chart(figure_or_data: Any, use_container_width: bool = False) -> None: ...
def image(image: str, caption: Optional[str] = None, width: Optional[int] = None) -> None: ...
def dataframe(data: Any, use_container_width: bool = False, hide_index: bool = False) -> None: ...
def rerun() -> None: ...
def cache_data(ttl: Optional[int] = None) -> Callable: ...

session_state: SessionState
sidebar: Any

class Sidebar:
    def markdown(self, body: str) -> None: ...
    def button(self, label: str, key: Optional[str] = None, help: Optional[str] = None, type: str = "secondary") -> bool: ...
    def checkbox(self, label: str, value: bool = False) -> bool: ...
    def selectbox(self, label: str, options: List[str], disabled: bool = False, help: Optional[str] = None) -> Any: ...
    def slider(self, label: str, min_value: int, max_value: int, value: int) -> int: ...
    def metric(self, label: str, value: str) -> None: ...
    def columns(self, spec: int) -> List[Any]: ...
    def error(self, body: str) -> None: ...
    def success(self, body: str) -> None: ...
    def info(self, body: str) -> None: ...